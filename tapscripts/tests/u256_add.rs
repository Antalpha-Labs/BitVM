
#[cfg(test)]
mod test {
    use tapscripts::opcodes::execute_script;
    use bitcoin_script::bitcoin_script as script;
    use tapscripts::opcodes::u256_std::u256_push;
    use tapscripts::opcodes::u256_add::u256_add_drop;
    use tapscripts::opcodes::{pushable, unroll};
    
    #[test]
    fn test_u256_add() {
        let u256_value_a: [u8; 32] = [
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        ];
        let u256_value_b: [u8; 32] = [
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        ];

        let script = script! {
            { u256_push(u256_value_a) }
            { u256_push(u256_value_b) }
            { u256_add_drop(1, 0) }
            0xfe OP_EQUALVERIFY
            { unroll(31, |_| script! { 0xff OP_EQUALVERIFY }) }
            OP_TRUE
        };
        let exec_result = execute_script(script);
        assert!(exec_result.success)
    }
}
